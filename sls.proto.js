/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.log.Log', null, global);
goog.exportSymbol('proto.log.Log.Content', null, global);
goog.exportSymbol('proto.log.LogGroup', null, global);
goog.exportSymbol('proto.log.LogGroupList', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.log.Log = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.log.Log.repeatedFields_, null);
};
goog.inherits(proto.log.Log, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.log.Log.displayName = 'proto.log.Log';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.log.Log.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.log.Log.prototype.toObject = function(opt_includeInstance) {
  return proto.log.Log.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.log.Log} msg The msg instance to transform.
 * @return {!Object}
 */
proto.log.Log.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: jspb.Message.getField(msg, 1),
    contentsList: jspb.Message.toObjectList(msg.getContentsList(),
    proto.log.Log.Content.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.log.Log}
 */
proto.log.Log.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.log.Log;
  return proto.log.Log.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.log.Log} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.log.Log}
 */
proto.log.Log.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    case 2:
      var value = new proto.log.Log.Content;
      reader.readMessage(value,proto.log.Log.Content.deserializeBinaryFromReader);
      msg.addContents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.log.Log} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.log.Log.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.log.Log.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.log.Log.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(this, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getContentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.log.Log.Content.serializeBinaryToWriter
    );
  }
};


/**
 * required uint32 time = 1;
 * @return {number}
 */
proto.log.Log.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.log.Log.prototype.setTime = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.log.Log.prototype.clearTime = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.log.Log.prototype.hasTime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Content contents = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.log.Log.Content>}
 */
proto.log.Log.prototype.getContentsList = function() {
  return /** @type{!Array.<!proto.log.Log.Content>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.log.Log.Content, 2));
};


/** @param {!Array.<!proto.log.Log.Content>} value */
proto.log.Log.prototype.setContentsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.log.Log.Content=} opt_value
 * @param {number=} opt_index
 * @return {!proto.log.Log.Content}
 */
proto.log.Log.prototype.addContents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.log.Log.Content, opt_index);
};


proto.log.Log.prototype.clearContentsList = function() {
  this.setContentsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.log.Log.Content = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.log.Log.Content, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.log.Log.Content.displayName = 'proto.log.Log.Content';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.log.Log.Content.prototype.toObject = function(opt_includeInstance) {
  return proto.log.Log.Content.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.log.Log.Content} msg The msg instance to transform.
 * @return {!Object}
 */
proto.log.Log.Content.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getField(msg, 1),
    value: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.log.Log.Content}
 */
proto.log.Log.Content.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.log.Log.Content;
  return proto.log.Log.Content.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.log.Log.Content} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.log.Log.Content}
 */
proto.log.Log.Content.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.log.Log.Content} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.log.Log.Content.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.log.Log.Content.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.log.Log.Content.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(this, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(this, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required string key = 1;
 * @return {string}
 */
proto.log.Log.Content.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.log.Log.Content.prototype.setKey = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.log.Log.Content.prototype.clearKey = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.log.Log.Content.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string value = 2;
 * @return {string}
 */
proto.log.Log.Content.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.log.Log.Content.prototype.setValue = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.log.Log.Content.prototype.clearValue = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.log.Log.Content.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.log.LogGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.log.LogGroup.repeatedFields_, null);
};
goog.inherits(proto.log.LogGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.log.LogGroup.displayName = 'proto.log.LogGroup';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.log.LogGroup.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.log.LogGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.log.LogGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.log.LogGroup} msg The msg instance to transform.
 * @return {!Object}
 */
proto.log.LogGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    logsList: jspb.Message.toObjectList(msg.getLogsList(),
    proto.log.Log.toObject, includeInstance),
    reserved: jspb.Message.getField(msg, 2),
    topic: jspb.Message.getField(msg, 3),
    source: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.log.LogGroup}
 */
proto.log.LogGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.log.LogGroup;
  return proto.log.LogGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.log.LogGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.log.LogGroup}
 */
proto.log.LogGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.log.Log;
      reader.readMessage(value,proto.log.Log.deserializeBinaryFromReader);
      msg.addLogs(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReserved(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopic(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.log.LogGroup} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.log.LogGroup.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.log.LogGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBase64String();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.log.LogGroup.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getLogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.log.Log.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(this, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(this, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(this, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * repeated Log logs = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.log.Log>}
 */
proto.log.LogGroup.prototype.getLogsList = function() {
  return /** @type{!Array.<!proto.log.Log>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.log.Log, 1));
};


/** @param {!Array.<!proto.log.Log>} value */
proto.log.LogGroup.prototype.setLogsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.log.Log=} opt_value
 * @param {number=} opt_index
 * @return {!proto.log.Log}
 */
proto.log.LogGroup.prototype.addLogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.log.Log, opt_index);
};


proto.log.LogGroup.prototype.clearLogsList = function() {
  this.setLogsList([]);
};


/**
 * optional string reserved = 2;
 * @return {string}
 */
proto.log.LogGroup.prototype.getReserved = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.log.LogGroup.prototype.setReserved = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.log.LogGroup.prototype.clearReserved = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.log.LogGroup.prototype.hasReserved = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string topic = 3;
 * @return {string}
 */
proto.log.LogGroup.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.log.LogGroup.prototype.setTopic = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.log.LogGroup.prototype.clearTopic = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.log.LogGroup.prototype.hasTopic = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string source = 4;
 * @return {string}
 */
proto.log.LogGroup.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.log.LogGroup.prototype.setSource = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.log.LogGroup.prototype.clearSource = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.log.LogGroup.prototype.hasSource = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.log.LogGroupList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.log.LogGroupList.repeatedFields_, null);
};
goog.inherits(proto.log.LogGroupList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.log.LogGroupList.displayName = 'proto.log.LogGroupList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.log.LogGroupList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.log.LogGroupList.prototype.toObject = function(opt_includeInstance) {
  return proto.log.LogGroupList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.log.LogGroupList} msg The msg instance to transform.
 * @return {!Object}
 */
proto.log.LogGroupList.toObject = function(includeInstance, msg) {
  var f, obj = {
    loggrouplistList: jspb.Message.toObjectList(msg.getLoggrouplistList(),
    proto.log.LogGroup.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.log.LogGroupList}
 */
proto.log.LogGroupList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.log.LogGroupList;
  return proto.log.LogGroupList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.log.LogGroupList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.log.LogGroupList}
 */
proto.log.LogGroupList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.log.LogGroup;
      reader.readMessage(value,proto.log.LogGroup.deserializeBinaryFromReader);
      msg.addLoggrouplist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.log.LogGroupList} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.log.LogGroupList.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.log.LogGroupList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.log.LogGroupList.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getLoggrouplistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.log.LogGroup.serializeBinaryToWriter
    );
  }
};


/**
 * repeated LogGroup logGroupList = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.log.LogGroup>}
 */
proto.log.LogGroupList.prototype.getLoggrouplistList = function() {
  return /** @type{!Array.<!proto.log.LogGroup>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.log.LogGroup, 1));
};


/** @param {!Array.<!proto.log.LogGroup>} value */
proto.log.LogGroupList.prototype.setLoggrouplistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.log.LogGroup=} opt_value
 * @param {number=} opt_index
 * @return {!proto.log.LogGroup}
 */
proto.log.LogGroupList.prototype.addLoggrouplist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.log.LogGroup, opt_index);
};


proto.log.LogGroupList.prototype.clearLoggrouplistList = function() {
  this.setLoggrouplistList([]);
};


goog.object.extend(exports, proto.log);
